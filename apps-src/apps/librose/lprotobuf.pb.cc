// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lprotobuf.proto

#include "lprotobuf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
extern PROTOBUF_INTERNAL_EXPORT_lprotobuf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_titem_lprotobuf_2eproto;
namespace pb2 {
class titemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<titem> _instance;
} _titem_default_instance_;
class titemsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<titems> _instance;
} _titems_default_instance_;
}  // namespace pb2
static void InitDefaultsscc_info_titem_lprotobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb2::_titem_default_instance_;
    new (ptr) ::pb2::titem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_titem_lprotobuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_titem_lprotobuf_2eproto}, {}};

static void InitDefaultsscc_info_titems_lprotobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb2::_titems_default_instance_;
    new (ptr) ::pb2::titems();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_titems_lprotobuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_titems_lprotobuf_2eproto}, {
      &scc_info_titem_lprotobuf_2eproto.base,}};

namespace pb2 {

// ===================================================================

class titem::_Internal {
 public:
};

titem::titem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb2.titem)
}
titem::titem(const titem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  stritem0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stritem0().empty()) {
    stritem0_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stritem0(), 
      GetArena());
  }
  stritem1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stritem1().empty()) {
    stritem1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stritem1(), 
      GetArena());
  }
  stritem2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stritem2().empty()) {
    stritem2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stritem2(), 
      GetArena());
  }
  stritem3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stritem3().empty()) {
    stritem3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stritem3(), 
      GetArena());
  }
  stritem4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stritem4().empty()) {
    stritem4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stritem4(), 
      GetArena());
  }
  ::memcpy(&n64item0_, &from.n64item0_,
    static_cast<size_t>(reinterpret_cast<char*>(&n32item9_) -
    reinterpret_cast<char*>(&n64item0_)) + sizeof(n32item9_));
  // @@protoc_insertion_point(copy_constructor:pb2.titem)
}

void titem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_titem_lprotobuf_2eproto.base);
  stritem0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stritem1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stritem2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stritem3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stritem4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&n64item0_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&n32item9_) -
      reinterpret_cast<char*>(&n64item0_)) + sizeof(n32item9_));
}

titem::~titem() {
  // @@protoc_insertion_point(destructor:pb2.titem)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void titem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stritem0_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stritem1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stritem2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stritem3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stritem4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void titem::ArenaDtor(void* object) {
  titem* _this = reinterpret_cast< titem* >(object);
  (void)_this;
}
void titem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void titem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const titem& titem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_titem_lprotobuf_2eproto.base);
  return *internal_default_instance();
}


void titem::Clear() {
// @@protoc_insertion_point(message_clear_start:pb2.titem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stritem0_.ClearToEmpty();
  stritem1_.ClearToEmpty();
  stritem2_.ClearToEmpty();
  stritem3_.ClearToEmpty();
  stritem4_.ClearToEmpty();
  ::memset(&n64item0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n32item9_) -
      reinterpret_cast<char*>(&n64item0_)) + sizeof(n32item9_));
  _internal_metadata_.Clear<std::string>();
}

const char* titem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 n32item0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          n32item0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 n64item0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          n64item0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stritem0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_stritem0();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n32item1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          n32item1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 n64item1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          n64item1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stritem1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_stritem1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n32item2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          n32item2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 n64item2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          n64item2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stritem2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_stritem2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n32item3 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          n32item3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stritem3 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_stritem3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n32item4 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          n32item4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stritem4 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_stritem4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n32item5 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          n32item5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n32item6 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          n32item6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n32item7 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          n32item7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n32item8 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          n32item8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n32item9 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          n32item9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* titem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb2.titem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 n32item0 = 1;
  if (this->n32item0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_n32item0(), target);
  }

  // int64 n64item0 = 2;
  if (this->n64item0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_n64item0(), target);
  }

  // string stritem0 = 3;
  if (this->stritem0().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stritem0().data(), static_cast<int>(this->_internal_stritem0().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb2.titem.stritem0");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_stritem0(), target);
  }

  // int32 n32item1 = 4;
  if (this->n32item1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_n32item1(), target);
  }

  // int64 n64item1 = 5;
  if (this->n64item1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_n64item1(), target);
  }

  // string stritem1 = 6;
  if (this->stritem1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stritem1().data(), static_cast<int>(this->_internal_stritem1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb2.titem.stritem1");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_stritem1(), target);
  }

  // int32 n32item2 = 7;
  if (this->n32item2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_n32item2(), target);
  }

  // int64 n64item2 = 8;
  if (this->n64item2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_n64item2(), target);
  }

  // string stritem2 = 9;
  if (this->stritem2().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stritem2().data(), static_cast<int>(this->_internal_stritem2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb2.titem.stritem2");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_stritem2(), target);
  }

  // int32 n32item3 = 10;
  if (this->n32item3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_n32item3(), target);
  }

  // string stritem3 = 11;
  if (this->stritem3().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stritem3().data(), static_cast<int>(this->_internal_stritem3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb2.titem.stritem3");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_stritem3(), target);
  }

  // int32 n32item4 = 12;
  if (this->n32item4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_n32item4(), target);
  }

  // string stritem4 = 13;
  if (this->stritem4().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stritem4().data(), static_cast<int>(this->_internal_stritem4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb2.titem.stritem4");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_stritem4(), target);
  }

  // int32 n32item5 = 14;
  if (this->n32item5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_n32item5(), target);
  }

  // int32 n32item6 = 15;
  if (this->n32item6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_n32item6(), target);
  }

  // int32 n32item7 = 16;
  if (this->n32item7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_n32item7(), target);
  }

  // int32 n32item8 = 17;
  if (this->n32item8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_n32item8(), target);
  }

  // int32 n32item9 = 18;
  if (this->n32item9() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_n32item9(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb2.titem)
  return target;
}

size_t titem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb2.titem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stritem0 = 3;
  if (this->stritem0().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stritem0());
  }

  // string stritem1 = 6;
  if (this->stritem1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stritem1());
  }

  // string stritem2 = 9;
  if (this->stritem2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stritem2());
  }

  // string stritem3 = 11;
  if (this->stritem3().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stritem3());
  }

  // string stritem4 = 13;
  if (this->stritem4().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stritem4());
  }

  // int64 n64item0 = 2;
  if (this->n64item0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_n64item0());
  }

  // int32 n32item0 = 1;
  if (this->n32item0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n32item0());
  }

  // int32 n32item1 = 4;
  if (this->n32item1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n32item1());
  }

  // int64 n64item1 = 5;
  if (this->n64item1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_n64item1());
  }

  // int64 n64item2 = 8;
  if (this->n64item2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_n64item2());
  }

  // int32 n32item2 = 7;
  if (this->n32item2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n32item2());
  }

  // int32 n32item3 = 10;
  if (this->n32item3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n32item3());
  }

  // int32 n32item4 = 12;
  if (this->n32item4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n32item4());
  }

  // int32 n32item5 = 14;
  if (this->n32item5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n32item5());
  }

  // int32 n32item6 = 15;
  if (this->n32item6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n32item6());
  }

  // int32 n32item7 = 16;
  if (this->n32item7() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n32item7());
  }

  // int32 n32item8 = 17;
  if (this->n32item8() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n32item8());
  }

  // int32 n32item9 = 18;
  if (this->n32item9() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n32item9());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void titem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const titem*>(
      &from));
}

void titem::MergeFrom(const titem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb2.titem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stritem0().size() > 0) {
    _internal_set_stritem0(from._internal_stritem0());
  }
  if (from.stritem1().size() > 0) {
    _internal_set_stritem1(from._internal_stritem1());
  }
  if (from.stritem2().size() > 0) {
    _internal_set_stritem2(from._internal_stritem2());
  }
  if (from.stritem3().size() > 0) {
    _internal_set_stritem3(from._internal_stritem3());
  }
  if (from.stritem4().size() > 0) {
    _internal_set_stritem4(from._internal_stritem4());
  }
  if (from.n64item0() != 0) {
    _internal_set_n64item0(from._internal_n64item0());
  }
  if (from.n32item0() != 0) {
    _internal_set_n32item0(from._internal_n32item0());
  }
  if (from.n32item1() != 0) {
    _internal_set_n32item1(from._internal_n32item1());
  }
  if (from.n64item1() != 0) {
    _internal_set_n64item1(from._internal_n64item1());
  }
  if (from.n64item2() != 0) {
    _internal_set_n64item2(from._internal_n64item2());
  }
  if (from.n32item2() != 0) {
    _internal_set_n32item2(from._internal_n32item2());
  }
  if (from.n32item3() != 0) {
    _internal_set_n32item3(from._internal_n32item3());
  }
  if (from.n32item4() != 0) {
    _internal_set_n32item4(from._internal_n32item4());
  }
  if (from.n32item5() != 0) {
    _internal_set_n32item5(from._internal_n32item5());
  }
  if (from.n32item6() != 0) {
    _internal_set_n32item6(from._internal_n32item6());
  }
  if (from.n32item7() != 0) {
    _internal_set_n32item7(from._internal_n32item7());
  }
  if (from.n32item8() != 0) {
    _internal_set_n32item8(from._internal_n32item8());
  }
  if (from.n32item9() != 0) {
    _internal_set_n32item9(from._internal_n32item9());
  }
}

void titem::CopyFrom(const titem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb2.titem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool titem::IsInitialized() const {
  return true;
}

void titem::InternalSwap(titem* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  stritem0_.Swap(&other->stritem0_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stritem1_.Swap(&other->stritem1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stritem2_.Swap(&other->stritem2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stritem3_.Swap(&other->stritem3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stritem4_.Swap(&other->stritem4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(titem, n32item9_)
      + sizeof(titem::n32item9_)
      - PROTOBUF_FIELD_OFFSET(titem, n64item0_)>(
          reinterpret_cast<char*>(&n64item0_),
          reinterpret_cast<char*>(&other->n64item0_));
}

std::string titem::GetTypeName() const {
  return "pb2.titem";
}


// ===================================================================

class titems::_Internal {
 public:
};

titems::titems(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb2.titems)
}
titems::titems(const titems& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  strtop0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strtop0().empty()) {
    strtop0_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strtop0(), 
      GetArena());
  }
  strtop1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strtop1().empty()) {
    strtop1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strtop1(), 
      GetArena());
  }
  strtop2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strtop2().empty()) {
    strtop2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strtop2(), 
      GetArena());
  }
  ::memcpy(&n64top0_, &from.n64top0_,
    static_cast<size_t>(reinterpret_cast<char*>(&n32top2_) -
    reinterpret_cast<char*>(&n64top0_)) + sizeof(n32top2_));
  // @@protoc_insertion_point(copy_constructor:pb2.titems)
}

void titems::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_titems_lprotobuf_2eproto.base);
  strtop0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strtop1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strtop2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&n64top0_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&n32top2_) -
      reinterpret_cast<char*>(&n64top0_)) + sizeof(n32top2_));
}

titems::~titems() {
  // @@protoc_insertion_point(destructor:pb2.titems)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void titems::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strtop0_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strtop1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strtop2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void titems::ArenaDtor(void* object) {
  titems* _this = reinterpret_cast< titems* >(object);
  (void)_this;
}
void titems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void titems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const titems& titems::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_titems_lprotobuf_2eproto.base);
  return *internal_default_instance();
}


void titems::Clear() {
// @@protoc_insertion_point(message_clear_start:pb2.titems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  strtop0_.ClearToEmpty();
  strtop1_.ClearToEmpty();
  strtop2_.ClearToEmpty();
  ::memset(&n64top0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n32top2_) -
      reinterpret_cast<char*>(&n64top0_)) + sizeof(n32top2_));
  _internal_metadata_.Clear<std::string>();
}

const char* titems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 n32top0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          n32top0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 n64top0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          n64top0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string strtop0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_strtop0();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb2.titem items = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 n32top1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          n32top1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 n64top1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          n64top1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string strtop1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_strtop1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n32top2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          n32top2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 n64top2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          n64top2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string strtop2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_strtop2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* titems::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb2.titems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 n32top0 = 1;
  if (this->n32top0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_n32top0(), target);
  }

  // int64 n64top0 = 2;
  if (this->n64top0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_n64top0(), target);
  }

  // string strtop0 = 3;
  if (this->strtop0().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strtop0().data(), static_cast<int>(this->_internal_strtop0().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb2.titems.strtop0");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strtop0(), target);
  }

  // repeated .pb2.titem items = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_items(i), target, stream);
  }

  // int32 n32top1 = 5;
  if (this->n32top1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_n32top1(), target);
  }

  // int64 n64top1 = 6;
  if (this->n64top1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_n64top1(), target);
  }

  // string strtop1 = 7;
  if (this->strtop1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strtop1().data(), static_cast<int>(this->_internal_strtop1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb2.titems.strtop1");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_strtop1(), target);
  }

  // int32 n32top2 = 8;
  if (this->n32top2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_n32top2(), target);
  }

  // int64 n64top2 = 9;
  if (this->n64top2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_n64top2(), target);
  }

  // string strtop2 = 10;
  if (this->strtop2().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strtop2().data(), static_cast<int>(this->_internal_strtop2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb2.titems.strtop2");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_strtop2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb2.titems)
  return target;
}

size_t titems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb2.titems)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb2.titem items = 4;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string strtop0 = 3;
  if (this->strtop0().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strtop0());
  }

  // string strtop1 = 7;
  if (this->strtop1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strtop1());
  }

  // string strtop2 = 10;
  if (this->strtop2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strtop2());
  }

  // int64 n64top0 = 2;
  if (this->n64top0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_n64top0());
  }

  // int32 n32top0 = 1;
  if (this->n32top0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n32top0());
  }

  // int32 n32top1 = 5;
  if (this->n32top1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n32top1());
  }

  // int64 n64top1 = 6;
  if (this->n64top1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_n64top1());
  }

  // int64 n64top2 = 9;
  if (this->n64top2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_n64top2());
  }

  // int32 n32top2 = 8;
  if (this->n32top2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n32top2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void titems::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const titems*>(
      &from));
}

void titems::MergeFrom(const titems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb2.titems)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.strtop0().size() > 0) {
    _internal_set_strtop0(from._internal_strtop0());
  }
  if (from.strtop1().size() > 0) {
    _internal_set_strtop1(from._internal_strtop1());
  }
  if (from.strtop2().size() > 0) {
    _internal_set_strtop2(from._internal_strtop2());
  }
  if (from.n64top0() != 0) {
    _internal_set_n64top0(from._internal_n64top0());
  }
  if (from.n32top0() != 0) {
    _internal_set_n32top0(from._internal_n32top0());
  }
  if (from.n32top1() != 0) {
    _internal_set_n32top1(from._internal_n32top1());
  }
  if (from.n64top1() != 0) {
    _internal_set_n64top1(from._internal_n64top1());
  }
  if (from.n64top2() != 0) {
    _internal_set_n64top2(from._internal_n64top2());
  }
  if (from.n32top2() != 0) {
    _internal_set_n32top2(from._internal_n32top2());
  }
}

void titems::CopyFrom(const titems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb2.titems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool titems::IsInitialized() const {
  return true;
}

void titems::InternalSwap(titems* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  strtop0_.Swap(&other->strtop0_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strtop1_.Swap(&other->strtop1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strtop2_.Swap(&other->strtop2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(titems, n32top2_)
      + sizeof(titems::n32top2_)
      - PROTOBUF_FIELD_OFFSET(titems, n64top0_)>(
          reinterpret_cast<char*>(&n64top0_),
          reinterpret_cast<char*>(&other->n64top0_));
}

std::string titems::GetTypeName() const {
  return "pb2.titems";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb2
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb2::titem* Arena::CreateMaybeMessage< ::pb2::titem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb2::titem >(arena);
}
template<> PROTOBUF_NOINLINE ::pb2::titems* Arena::CreateMaybeMessage< ::pb2::titems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb2::titems >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
