// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base\android\jni_generator\jni_generator.py
// For
//     org/chromium/net/NetworkActivationRequest

#ifndef org_chromium_net_NetworkActivationRequest_JNI
#define org_chromium_net_NetworkActivationRequest_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_net_NetworkActivationRequest[];
const char kClassPath_org_chromium_net_NetworkActivationRequest[] =
    "org/chromium/net/NetworkActivationRequest";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_net_NetworkActivationRequest_clazz(nullptr);
#ifndef org_chromium_net_NetworkActivationRequest_clazz_defined
#define org_chromium_net_NetworkActivationRequest_clazz_defined
inline jclass org_chromium_net_NetworkActivationRequest_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_net_NetworkActivationRequest,
      &g_org_chromium_net_NetworkActivationRequest_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace net {
namespace android {

static void JNI_NetworkActivationRequest_NotifyAvailable(JNIEnv* env, jlong
    nativeNetworkActivationRequest,
    jlong netId);

JNI_GENERATOR_EXPORT void
    Java_org_chromium_base_natives_GEN_1JNI_org_1chromium_1net_1NetworkActivationRequest_1notifyAvailable(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNetworkActivationRequest,
    jlong netId) {
  // [rose fixing]
  // return JNI_NetworkActivationRequest_NotifyAvailable(env, nativeNetworkActivationRequest, netId);
}


static std::atomic<jmethodID> g_org_chromium_net_NetworkActivationRequest_unregister(nullptr);
static void Java_NetworkActivationRequest_unregister(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_net_NetworkActivationRequest_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_net_NetworkActivationRequest_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "unregister",
          "()V",
          &g_org_chromium_net_NetworkActivationRequest_unregister);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_net_NetworkActivationRequest_createMobileNetworkRequest(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_NetworkActivationRequest_createMobileNetworkRequest(JNIEnv* env, jlong nativePtr) {
  jclass clazz = org_chromium_net_NetworkActivationRequest_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_net_NetworkActivationRequest_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createMobileNetworkRequest",
          "(J)Lorg/chromium/net/NetworkActivationRequest;",
          &g_org_chromium_net_NetworkActivationRequest_createMobileNetworkRequest);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativePtr);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace android
}  // namespace net

#endif  // org_chromium_net_NetworkActivationRequest_JNI
