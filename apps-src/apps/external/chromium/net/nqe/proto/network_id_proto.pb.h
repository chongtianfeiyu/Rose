// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network_id_proto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_network_5fid_5fproto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_network_5fid_5fproto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_network_5fid_5fproto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_network_5fid_5fproto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace net {
namespace nqe {
namespace internal {
class NetworkIDProto;
class NetworkIDProtoDefaultTypeInternal;
extern NetworkIDProtoDefaultTypeInternal _NetworkIDProto_default_instance_;
}  // namespace internal
}  // namespace nqe
}  // namespace net
PROTOBUF_NAMESPACE_OPEN
template<> ::net::nqe::internal::NetworkIDProto* Arena::CreateMaybeMessage<::net::nqe::internal::NetworkIDProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace net {
namespace nqe {
namespace internal {

// ===================================================================

class NetworkIDProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:net.nqe.internal.NetworkIDProto) */ {
 public:
  inline NetworkIDProto() : NetworkIDProto(nullptr) {}
  virtual ~NetworkIDProto();

  NetworkIDProto(const NetworkIDProto& from);
  NetworkIDProto(NetworkIDProto&& from) noexcept
    : NetworkIDProto() {
    *this = ::std::move(from);
  }

  inline NetworkIDProto& operator=(const NetworkIDProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkIDProto& operator=(NetworkIDProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const NetworkIDProto& default_instance();

  static inline const NetworkIDProto* internal_default_instance() {
    return reinterpret_cast<const NetworkIDProto*>(
               &_NetworkIDProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetworkIDProto& a, NetworkIDProto& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkIDProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkIDProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkIDProto* New() const final {
    return CreateMaybeMessage<NetworkIDProto>(nullptr);
  }

  NetworkIDProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkIDProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NetworkIDProto& from);
  void MergeFrom(const NetworkIDProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetworkIDProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.nqe.internal.NetworkIDProto";
  }
  protected:
  explicit NetworkIDProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kConnectionTypeFieldNumber = 1,
    kSignalStrengthFieldNumber = 3,
  };
  // optional string id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional int32 connection_type = 1;
  bool has_connection_type() const;
  private:
  bool _internal_has_connection_type() const;
  public:
  void clear_connection_type();
  ::PROTOBUF_NAMESPACE_ID::int32 connection_type() const;
  void set_connection_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_connection_type() const;
  void _internal_set_connection_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 signal_strength = 3;
  bool has_signal_strength() const;
  private:
  bool _internal_has_signal_strength() const;
  public:
  void clear_signal_strength();
  ::PROTOBUF_NAMESPACE_ID::int32 signal_strength() const;
  void set_signal_strength(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_signal_strength() const;
  void _internal_set_signal_strength(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.nqe.internal.NetworkIDProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::int32 connection_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 signal_strength_;
  friend struct ::TableStruct_network_5fid_5fproto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetworkIDProto

// optional int32 connection_type = 1;
inline bool NetworkIDProto::_internal_has_connection_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetworkIDProto::has_connection_type() const {
  return _internal_has_connection_type();
}
inline void NetworkIDProto::clear_connection_type() {
  connection_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkIDProto::_internal_connection_type() const {
  return connection_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkIDProto::connection_type() const {
  // @@protoc_insertion_point(field_get:net.nqe.internal.NetworkIDProto.connection_type)
  return _internal_connection_type();
}
inline void NetworkIDProto::_internal_set_connection_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  connection_type_ = value;
}
inline void NetworkIDProto::set_connection_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_connection_type(value);
  // @@protoc_insertion_point(field_set:net.nqe.internal.NetworkIDProto.connection_type)
}

// optional string id = 2;
inline bool NetworkIDProto::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetworkIDProto::has_id() const {
  return _internal_has_id();
}
inline void NetworkIDProto::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetworkIDProto::id() const {
  // @@protoc_insertion_point(field_get:net.nqe.internal.NetworkIDProto.id)
  return _internal_id();
}
inline void NetworkIDProto::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:net.nqe.internal.NetworkIDProto.id)
}
inline std::string* NetworkIDProto::mutable_id() {
  // @@protoc_insertion_point(field_mutable:net.nqe.internal.NetworkIDProto.id)
  return _internal_mutable_id();
}
inline const std::string& NetworkIDProto::_internal_id() const {
  return id_.Get();
}
inline void NetworkIDProto::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NetworkIDProto::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:net.nqe.internal.NetworkIDProto.id)
}
inline void NetworkIDProto::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:net.nqe.internal.NetworkIDProto.id)
}
inline void NetworkIDProto::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:net.nqe.internal.NetworkIDProto.id)
}
inline std::string* NetworkIDProto::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NetworkIDProto::release_id() {
  // @@protoc_insertion_point(field_release:net.nqe.internal.NetworkIDProto.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkIDProto::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:net.nqe.internal.NetworkIDProto.id)
}

// optional int32 signal_strength = 3;
inline bool NetworkIDProto::_internal_has_signal_strength() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NetworkIDProto::has_signal_strength() const {
  return _internal_has_signal_strength();
}
inline void NetworkIDProto::clear_signal_strength() {
  signal_strength_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkIDProto::_internal_signal_strength() const {
  return signal_strength_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkIDProto::signal_strength() const {
  // @@protoc_insertion_point(field_get:net.nqe.internal.NetworkIDProto.signal_strength)
  return _internal_signal_strength();
}
inline void NetworkIDProto::_internal_set_signal_strength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  signal_strength_ = value;
}
inline void NetworkIDProto::set_signal_strength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_signal_strength(value);
  // @@protoc_insertion_point(field_set:net.nqe.internal.NetworkIDProto.signal_strength)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace internal
}  // namespace nqe
}  // namespace net

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_network_5fid_5fproto_2eproto
