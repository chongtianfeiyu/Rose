// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base\android\jni_generator\jni_generator.py
// For
//     org/chromium/base/RadioUtils

#ifndef org_chromium_base_RadioUtils_JNI
#define org_chromium_base_RadioUtils_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_base_RadioUtils[];
const char kClassPath_org_chromium_base_RadioUtils[] = "org/chromium/base/RadioUtils";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_chromium_base_RadioUtils_clazz(nullptr);
#ifndef org_chromium_base_RadioUtils_clazz_defined
#define org_chromium_base_RadioUtils_clazz_defined
inline jclass org_chromium_base_RadioUtils_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_base_RadioUtils,
      &g_org_chromium_base_RadioUtils_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace base {
namespace android {


static std::atomic<jmethodID> g_org_chromium_base_RadioUtils_isSupported(nullptr);
static jboolean Java_RadioUtils_isSupported(JNIEnv* env) {
  jclass clazz = org_chromium_base_RadioUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_RadioUtils_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isSupported",
          "()Z",
          &g_org_chromium_base_RadioUtils_isSupported);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_base_RadioUtils_isWifiConnected(nullptr);
static jboolean Java_RadioUtils_isWifiConnected(JNIEnv* env) {
  jclass clazz = org_chromium_base_RadioUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_RadioUtils_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isWifiConnected",
          "()Z",
          &g_org_chromium_base_RadioUtils_isWifiConnected);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_base_RadioUtils_getCellSignalLevel(nullptr);
static jint Java_RadioUtils_getCellSignalLevel(JNIEnv* env) {
  jclass clazz = org_chromium_base_RadioUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_RadioUtils_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getCellSignalLevel",
          "()I",
          &g_org_chromium_base_RadioUtils_getCellSignalLevel);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_base_RadioUtils_getCellDataActivity(nullptr);
static jint Java_RadioUtils_getCellDataActivity(JNIEnv* env) {
  jclass clazz = org_chromium_base_RadioUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_RadioUtils_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getCellDataActivity",
          "()I",
          &g_org_chromium_base_RadioUtils_getCellDataActivity);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id);
  return ret;
}

}  // namespace android
}  // namespace base

#endif  // org_chromium_base_RadioUtils_JNI
