// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base\android\jni_generator\jni_generator.py
// For
//     org/chromium/base/metrics/NativeUmaRecorder

#ifndef org_chromium_base_metrics_NativeUmaRecorder_JNI
#define org_chromium_base_metrics_NativeUmaRecorder_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace base {
namespace android {

static jlong JNI_NativeUmaRecorder_RecordBooleanHistogram(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong nativeHint,
    jboolean sample);

JNI_GENERATOR_EXPORT jlong
    Java_org_chromium_base_natives_GEN_1JNI_org_1chromium_1base_1metrics_1NativeUmaRecorder_1recordBooleanHistogram(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong nativeHint,
    jboolean sample) {
  return JNI_NativeUmaRecorder_RecordBooleanHistogram(env, base::android::JavaParamRef<jstring>(env,
      name), nativeHint, sample);
}

static jlong JNI_NativeUmaRecorder_RecordExponentialHistogram(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong nativeHint,
    jint sample,
    jint min,
    jint max,
    jint numBuckets);

JNI_GENERATOR_EXPORT jlong
    Java_org_chromium_base_natives_GEN_1JNI_org_1chromium_1base_1metrics_1NativeUmaRecorder_1recordExponentialHistogram(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong nativeHint,
    jint sample,
    jint min,
    jint max,
    jint numBuckets) {
  return JNI_NativeUmaRecorder_RecordExponentialHistogram(env,
      base::android::JavaParamRef<jstring>(env, name), nativeHint, sample, min, max, numBuckets);
}

static jlong JNI_NativeUmaRecorder_RecordLinearHistogram(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong nativeHint,
    jint sample,
    jint min,
    jint max,
    jint numBuckets);

JNI_GENERATOR_EXPORT jlong
    Java_org_chromium_base_natives_GEN_1JNI_org_1chromium_1base_1metrics_1NativeUmaRecorder_1recordLinearHistogram(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong nativeHint,
    jint sample,
    jint min,
    jint max,
    jint numBuckets) {
  return JNI_NativeUmaRecorder_RecordLinearHistogram(env, base::android::JavaParamRef<jstring>(env,
      name), nativeHint, sample, min, max, numBuckets);
}

static jlong JNI_NativeUmaRecorder_RecordSparseHistogram(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong nativeHint,
    jint sample);

JNI_GENERATOR_EXPORT jlong
    Java_org_chromium_base_natives_GEN_1JNI_org_1chromium_1base_1metrics_1NativeUmaRecorder_1recordSparseHistogram(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong nativeHint,
    jint sample) {
  return JNI_NativeUmaRecorder_RecordSparseHistogram(env, base::android::JavaParamRef<jstring>(env,
      name), nativeHint, sample);
}

static void JNI_NativeUmaRecorder_RecordUserAction(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong millisSinceEvent);

JNI_GENERATOR_EXPORT void
    Java_org_chromium_base_natives_GEN_1JNI_org_1chromium_1base_1metrics_1NativeUmaRecorder_1recordUserAction(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong millisSinceEvent) {
  return JNI_NativeUmaRecorder_RecordUserAction(env, base::android::JavaParamRef<jstring>(env,
      name), millisSinceEvent);
}


}  // namespace android
}  // namespace base

#endif  // org_chromium_base_metrics_NativeUmaRecorder_JNI
