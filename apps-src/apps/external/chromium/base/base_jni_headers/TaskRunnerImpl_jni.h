// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base\android\jni_generator\jni_generator.py
// For
//     org/chromium/base/task/TaskRunnerImpl

#ifndef org_chromium_base_task_TaskRunnerImpl_JNI
#define org_chromium_base_task_TaskRunnerImpl_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace base {

static jlong JNI_TaskRunnerImpl_Init(JNIEnv* env, jint taskRunnerType,
    jint priority,
    jboolean mayBlock,
    jboolean useThreadPool,
    jbyte extensionId,
    const base::android::JavaParamRef<jbyteArray>& extensionData);

JNI_GENERATOR_EXPORT jlong
    Java_org_chromium_base_natives_GEN_1JNI_org_1chromium_1base_1task_1TaskRunnerImpl_1init(
    JNIEnv* env,
    jclass jcaller,
    jint taskRunnerType,
    jint priority,
    jboolean mayBlock,
    jboolean useThreadPool,
    jbyte extensionId,
    jbyteArray extensionData) {
  return JNI_TaskRunnerImpl_Init(env, taskRunnerType, priority, mayBlock, useThreadPool,
      extensionId, base::android::JavaParamRef<jbyteArray>(env, extensionData));
}

static void JNI_TaskRunnerImpl_Destroy(JNIEnv* env, jlong nativeTaskRunnerAndroid);

JNI_GENERATOR_EXPORT void
    Java_org_chromium_base_natives_GEN_1JNI_org_1chromium_1base_1task_1TaskRunnerImpl_1destroy(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTaskRunnerAndroid) {
  // [rose fixing]
  // return JNI_TaskRunnerImpl_Destroy(env, nativeTaskRunnerAndroid);
}

static void JNI_TaskRunnerImpl_PostDelayedTask(JNIEnv* env, jlong nativeTaskRunnerAndroid,
    const base::android::JavaParamRef<jobject>& task,
    jlong delay,
    const base::android::JavaParamRef<jstring>& runnableClassName);

JNI_GENERATOR_EXPORT void
    Java_org_chromium_base_natives_GEN_1JNI_org_1chromium_1base_1task_1TaskRunnerImpl_1postDelayedTask(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTaskRunnerAndroid,
    jobject task,
    jlong delay,
    jstring runnableClassName) {
  // [rose fixing]
  // return JNI_TaskRunnerImpl_PostDelayedTask(env, nativeTaskRunnerAndroid,
  //    base::android::JavaParamRef<jobject>(env, task), delay,
  //    base::android::JavaParamRef<jstring>(env, runnableClassName));
}

static jboolean JNI_TaskRunnerImpl_BelongsToCurrentThread(JNIEnv* env, jlong
    nativeTaskRunnerAndroid);

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_base_natives_GEN_1JNI_org_1chromium_1base_1task_1TaskRunnerImpl_1belongsToCurrentThread(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTaskRunnerAndroid) {
  // [rose fixing]
  return JNI_FALSE;
  // return JNI_TaskRunnerImpl_BelongsToCurrentThread(env, nativeTaskRunnerAndroid);
}


}  // namespace base

#endif  // org_chromium_base_task_TaskRunnerImpl_JNI
